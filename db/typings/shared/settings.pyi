"""
This type stub file was generated by pyright.
"""

import ipaddress
import logging
from enum import Enum
from typing import Annotated
from pydantic import BaseSettings, EmailStr, Field, SecretStr
from typing_extensions import Self

"""Настройки приложения.

Для создания файла с дефолтными настройками запустить функцию create_env():

- создаем задачу poe:

[tool.poe.tasks.create_env]
help = "Создание файла с настройками"
script = "src.shared.settings:create_env"

- запускаем:

poetry run poe create_env

Для чтения настроек импортировать:

from src.shared.settings import SettingsSchema, settings_store
settings: SettingsSchema = settings_store.settings
"""
log: logging.Logger = ...
ENV_FILE: str = ...
ENCODING: str = ...
class Prof(Enum):
    """Профили настроек."""
    api = ...
    dev = ...
    driver_ascue = ...
    deconz_hub = ...
    driver_deconz = ...
    db = ...
    pgadmin = ...


class SettingsSchema(BaseSettings):
    """Модель для сохранения настроек."""
    class Config(BaseSettings.Config):
        """Настройки."""
        env_file: str = ...
        env_file_encoding: str = ...
    
    
    debug: bool = ...
    timezone: str = ...
    db_user: Annotated[str, Field(profiles=[Prof.db])] = ...
    db_password: Annotated[SecretStr, Field(profiles=[Prof.db]),] = ...
    db_host: Annotated[ipaddress.IPv4Address, Field(profiles=[Prof.db]),] = ...
    db_port: Annotated[int, Field(profiles=[Prof.db])] = ...
    driver_deconz_host: Annotated[ipaddress.IPv4Address, Field(profiles=[Prof.driver_deconz]),] = ...
    driver_deconz_port: Annotated[int, Field(profiles=[Prof.driver_deconz]),] = ...
    deconz_hub_api_key: Annotated[SecretStr, Field(profiles=[Prof.deconz_hub]),] = ...
    deconz_hub_host: Annotated[ipaddress.IPv4Address, Field(profiles=[Prof.deconz_hub]),] = ...
    deconz_hub_port_api: Annotated[int, Field(profiles=[Prof.deconz_hub]),] = ...
    deconz_hub_port_vnc: Annotated[int, Field(profiles=[Prof.deconz_hub]),] = ...
    deconz_hub_port_ws: Annotated[int, Field(profiles=[Prof.deconz_hub]),] = ...
    pgadmin_email: Annotated[EmailStr, Field(profiles=[Prof.pgadmin]),] = ...
    pgadmin_password: Annotated[SecretStr, Field(profiles=[Prof.pgadmin]),] = ...
    pgadmin_port: Annotated[int, Field(profiles=[Prof.pgadmin])] = ...


def check_item_in_profile(key: str, profiles: set[Prof]) -> bool:
    """Проверяет, есть в ключе key профиль profile.

    Если нет поля profiles, возвращает True

    Parameters
    ----------
    key: str
        ключ для проверки
    profiles: set[Prof]
        профили для проверки

    Returns
    -------
    True - можно экспортировать
    """
    ...

def create_env(profiles: set[Prof]) -> None:
    """Записывает файл с дефолтными значениями.

    Экспортируются настройки,
    у которых в поле profiles указан необходимый профиль.
    Если у настройки нето поля profiles, она всегда экспортируется.

    Parameters
    ----------
    profiles
        профили для экспорта настроек
    """
    ...

class SettingsStore:
    """Хранение настроек."""
    __settings: SettingsSchema | None
    def __init__(self: Self) -> None:
        """Хранение настроек."""
        ...
    
    @property
    def settings(self: Self) -> SettingsSchema:
        """Получить настройки.

        Returns
        -------
        настройки
        """
        ...
    


def export_env(path: str, filename: str) -> None:
    """Экспортировать настройки в формате JSON.

    Parameters
    ----------
    path
        папка для экспорта
    filename
        название файла для экспорта
    """
    ...

settings_store: SettingsStore = ...
